#!/usr/bin/env lua

-- Shortcuts Help - Display all shortcuts in a nice format
-- Reads from centralized shortcuts.lua configuration

local home = os.getenv("HOME")
local shortcuts_file = home .. "/.config/shortcuts/shortcuts.lua"

-- Try dotfiles directory if not in home
local f = io.open(shortcuts_file, "r")
if not f then
  shortcuts_file = home .. "/personal/dotfiles/dot_config/shortcuts/shortcuts.lua"
else
  f:close()
end

local shortcuts = dofile(shortcuts_file)

-- Function to escape special characters for Pango markup
local function escape_markup(str)
  return str:gsub("&", "&amp;")
            :gsub("<", "&lt;")
            :gsub(">", "&gt;")
            :gsub("\"", "&quot;")
            :gsub("'", "&apos;")
end


-- Build rofi content
local rofi_lines = {}

-- Header
table.insert(rofi_lines, "<span size='x-large' weight='bold'>⌨️  Shortcuts Reference</span>")
table.insert(rofi_lines, "")

-- TMUX section
table.insert(rofi_lines, "<span size='large' weight='bold' foreground='#7aa2f7'>━━━ TMUX (Prefix: " .. shortcuts.tmux.prefix .. ") ━━━</span>")
table.insert(rofi_lines, "")

local tmux_items = {}
for key, binding in pairs(shortcuts.tmux.bindings) do
  local desc = binding[1]
  local prefix = binding.prefix or (binding[3] and binding[3].prefix)
  local key_str = prefix and ("Prefix " .. key) or key
  table.insert(tmux_items, {key = key_str, desc = desc})
end
table.sort(tmux_items, function(a, b) return a.key < b.key end)

for _, item in ipairs(tmux_items) do
  table.insert(rofi_lines, string.format("<tt>%-25s</tt>  %s", escape_markup(item.key), escape_markup(item.desc)))
end

-- i3 section
table.insert(rofi_lines, "")
table.insert(rofi_lines, "<span size='large' weight='bold' foreground='#7aa2f7'>━━━ i3 WINDOW MANAGER (Mod=Alt) ━━━</span>")
table.insert(rofi_lines, "")

local i3_items = {}
for key, binding in pairs(shortcuts.i3.bindings) do
  local desc = binding[1]
  local no_mod = binding.no_mod or (binding[3] and binding[3].no_mod)
  local key_str = no_mod and key or ("Mod+" .. key)
  table.insert(i3_items, {key = key_str, desc = desc})
end
table.sort(i3_items, function(a, b) return a.key < b.key end)

for _, item in ipairs(i3_items) do
  table.insert(rofi_lines, string.format("<tt>%-25s</tt>  %s", escape_markup(item.key), escape_markup(item.desc)))
end

-- Shell aliases section
table.insert(rofi_lines, "")
table.insert(rofi_lines, "<span size='large' weight='bold' foreground='#7aa2f7'>━━━ SHELL ALIASES ━━━</span>")

for category, aliases in pairs(shortcuts.aliases) do
  table.insert(rofi_lines, "")
  table.insert(rofi_lines, "<b>" .. category:upper() .. ":</b>")
  
  local alias_items = {}
  for alias, cmd in pairs(aliases) do
    local desc = cmd:match("%-%-(.+)$") or cmd
    table.insert(alias_items, {alias = alias, desc = desc})
  end
  table.sort(alias_items, function(a, b) return a.alias < b.alias end)
  
  for _, item in ipairs(alias_items) do
    table.insert(rofi_lines, string.format("<tt>%-25s</tt>  %s", escape_markup(item.alias), escape_markup(item.desc)))
  end
end

-- Write to temp file and show with rofi
local tmpfile = os.tmpname()
local f = io.open(tmpfile, "w")
f:write(table.concat(rofi_lines, "\n"))
f:close()

os.execute("rofi -dmenu -p '' -markup-rows -i -no-custom " ..
           "-theme-str 'window {width: 1000px; height: 80%; location: center;}' " ..
           "-theme-str 'listview {lines: 40; scrollbar: true;}' " ..
           "-theme-str 'element {padding: 4px 12px;}' " ..
           "-theme-str 'element-text {horizontal-align: 0;}' " ..
           "-theme-str 'inputbar {enabled: false;}' " ..
           "< " .. tmpfile)

os.remove(tmpfile)